import { useEffect, useMemo, useState } from "react";
import { apiPatch } from "../config/apiClient";
import AttachmentTab from "./AttachmentTab";
import FolderPickerModal from "./FolderPickerModal";

/**
 * Props:
 * - open: boolean
 * - onClose: () => void
 * - task: TaskDto (id, status, fai, qs, stk, fa, dateipfad, ...)
 * - arbeitsstationen: Array<{id,name,sort_order?}>
 * - onSaved?: (updatedTask) => void
 * - initialTab?: "details" | "attachments"
 */
export default function TaskEditModal({
  open,
  onClose,
  task,
  arbeitsstationen = [],
  onSaved,
  initialTab = "details",
}) {
  const [activeTab, setActiveTab] = useState(initialTab);
  const [submitting, setSubmitting] = useState(false);
  const [errorMsg, setErrorMsg] = useState(null);
  const [showPicker, setShowPicker] = useState(false);

  const [form, setForm] = useState(() => toForm(task));

  // Beim Öffnen immer auf "details" zurück und Formular aus Task füllen
  useEffect(() => {
    if (open) {
      setActiveTab("details");
      setForm(toForm(task));
      setErrorMsg(null);
    }
  }, [open, task?.id]);

  const stations = useMemo(() => {
    return [...arbeitsstationen].sort((a, b) => (a.sort_order ?? 0) - (b.sort_order ?? 0));
  }, [arbeitsstationen]);

  const STATUS = ["neu", "to_do", "in_bearbeitung", "fertig"];
  const statusLabel = (s) =>
    ({ neu: "Neu", to_do: "To Do", in_bearbeitung: "In Bearbeitung", fertig: "Fertig" }[s] || s);

  const pillCls = (s) => (form.status === s ? `pill st-${s} is-selected` : `pill`);

  async function handleSubmit(e) {
    e?.preventDefault?.();
    if (!task?.id) return;
    setSubmitting(true);
    setErrorMsg(null);
    try {
      const payload = fromForm(form);
      const updated = await apiPatch(`/tasks/${task.id}`, payload);
      onSaved?.(updated);
      onClose?.();
    } catch (err) {
      console.error(err);
      setErrorMsg(err?.message || "Speichern fehlgeschlagen");
    } finally {
      setSubmitting(false);
    }
  }

  function pickFolder() {
    setShowPicker(true);
  }
  function onFolderPicked(relPath) {
    setShowPicker(false);
    if (relPath) setForm((v) => ({ ...v, dateipfad: relPath }));
  }

  if (!open) return null;

  return (
    <div className="modal-backdrop" onMouseDown={(e) => e.stopPropagation()}>
      <div className="modal" role="dialog" aria-modal="true" style={{ width: 960, maxWidth: "95vw" }}>
        <div className="modal-header">
          <h3 style={{ margin: 0 }}>Aufgabe bearbeiten {task?.id ? `#${task.id}` : ""}</h3>
          <button className="btn btn-ghost" onClick={onClose} aria-label="Schließen">✕</button>
        </div>

        <div className="modal-tabs" style={{ borderBottom: "1px solid #eee", marginBottom: 12 }}>
          <TabButton id="details" activeTab={activeTab} setActiveTab={setActiveTab}>Details</TabButton>
          <TabButton id="attachments" activeTab={activeTab} setActiveTab={setActiveTab}>Anhänge</TabButton>
        </div>

        {errorMsg ? <div className="alert alert-error" style={{ marginBottom: 12 }}>{errorMsg}</div> : null}

        {activeTab === "details" && (
          <form onSubmit={handleSubmit} className="content" style={{ display: "grid", gap: 12 }}>
            <div className="grid-2" style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: 12 }}>
              <Labeled>
                <label>Bezeichnung</label>
                <input
                  type="text"
                  value={form.bezeichnung || ""}
                  onChange={(e) => setForm((v) => ({ ...v, bezeichnung: e.target.value }))}
                />
              </Labeled>

              <Labeled>
                <label>Kunde</label>
                <input
                  type="text"
                  value={form.kunde || ""}
                  onChange={(e) => setForm((v) => ({ ...v, kunde: e.target.value }))}
                />
              </Labeled>

              <Labeled>
                <label>Teilenummer</label>
                <input
                  type="text"
                  value={form.teilenummer || ""}
                  onChange={(e) => setForm((v) => ({ ...v, teilenummer: e.target.value }))}
                />
              </Labeled>

              <Labeled>
                <label>Fertig bis</label>
                <input
                  type="date"
                  value={form.end_datum || ""}
                  onChange={(e) => setForm((v) => ({ ...v, end_datum: e.target.value }))}
                />
              </Labeled>

              <Labeled>
                <label>Stückzahl (Stk)</label>
                <input
                  type="number"
                  min={0}
                  step={1}
                  value={Number.isFinite(form.stk) ? form.stk : ""}
                  onChange={(e) => {
                    const n = e.target.value === "" ? null : parseInt(e.target.value, 10);
                    setForm((v) => ({ ...v, stk: Number.isFinite(n) ? n : null }));
                  }}
                />
              </Labeled>

              <Labeled>
                <label>FA (Fertigungsauftrag Nr.)</label>
                <input
                  type="text"
                  value={form.fa || ""}
                  onChange={(e) => setForm((v) => ({ ...v, fa: e.target.value }))}
                />
              </Labeled>
            </div>

            <Labeled>
              <label>Status</label>
              <div className="flex flex-wrap gap-2" style={{ rowGap: 6 }}>
                {STATUS.map((s) => (
                  <button
                    key={s}
                    type="button"
                    className={pillCls(s)}
                    title={statusLabel(s)}
                    onClick={() => setForm((v) => ({ ...v, status: s }))}
                    style={{ lineHeight: 1.1 }}
                  >
                    {statusLabel(s)}
                  </button>
                ))}
              </div>
            </Labeled>

            <Labeled>
              <label>Zusatzarbeiten</label>
              <div className="flex flex-wrap gap-2" style={{ rowGap: 6 }}>
                <button
                  type="button"
                  className={`pill-add add-fai ${form.fai ? "is-active" : ""}`}
                  onClick={() => setForm((v) => ({ ...v, fai: !v.fai }))}
                >
                  FAI
                </button>
                <button
                  type="button"
                  className={`pill-add add-qs ${form.qs ? "is-active" : ""}`}
                  onClick={() => setForm((v) => ({ ...v, qs: !v.qs }))}
                >
                  QS
                </button>
              </div>
            </Labeled>

            <div className="grid-2" style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: 12 }}>
              <Labeled>
                <label>Arbeitsstation</label>
                <select
                  value={form.arbeitsstation ?? ""}
                  onChange={(e) =>
                    setForm((v) => ({
                      ...v,
                      arbeitsstation: e.target.value === "" ? null : Number(e.target.value),
                    }))
                  }
                >
                  <option value="">– nicht zugeordnet –</option>
                  {stations.map((s) => (
                    <option key={s.id} value={s.id}>
                      {s.name ?? s.bezeichnung ?? `#${s.id}`}
                    </option>
                  ))}
                </select>
              </Labeled>

              <Labeled>
                <label>Zuständig</label>
                <input
                  type="text"
                  value={form.zustaendig || ""}
                  onChange={(e) => setForm((v) => ({ ...v, zustaendig: e.target.value }))}
                />
              </Labeled>
            </div>

            <Labeled>
              <label>Dateipfad</label>
              <div style={{ display: "flex", gap: 8 }}>
                <input
                  type="text"
                  value={form.dateipfad || ""}
                  onChange={(e) => setForm((v) => ({ ...v, dateipfad: e.target.value }))}
                  placeholder="z. B. Kunde/Teil"
                  style={{ flex: 1 }}
                />
                <button type="button" className="btn" onClick={pickFolder} title="Ordner auswählen">
                  Ordner wählen…
                </button>
              </div>
              <p className="hint">Speichert relativ zum serverseitigen Basisordner.</p>
            </Labeled>

            <Labeled>
              <label>Zusätzliche Infos</label>
              <textarea
                rows={4}
                value={form.zusaetzliche_infos || ""}
                onChange={(e) => setForm((v) => ({ ...v, zusaetzliche_infos: e.target.value }))}
              />
            </Labeled>

            <div className="modal-footer" style={{ display: "flex", gap: 8, justifyContent: "flex-end" }}>
              <button type="button" className="btn btn-ghost" onClick={onClose}>Abbrechen</button>
              <button type="submit" className="btn btn-primary" disabled={submitting}>
                {submitting ? "Speichere…" : "Speichern"}
              </button>
            </div>
          </form>
        )}

        {activeTab === "attachments" && (
          <div style={{ paddingTop: 4 }}>
            <AttachmentTab taskId={task?.id} />
          </div>
        )}
      </div>

      {showPicker && (
        <FolderPickerModal
          open={showPicker}
          onClose={() => setShowPicker(false)}
          onPicked={onFolderPicked}
        />
      )}

      <style>{modalCss}</style>
    </div>
  );
}

function TabButton({ id, activeTab, setActiveTab, children }) {
  const active = activeTab === id;
  return (
    <button
      type="button"
      className={active ? "tab active" : "tab"}
      onClick={() => setActiveTab(id)}
      style={{
        padding: "8px 12px",
        borderBottom: active ? "2px solid var(--color-primary, #4f46e5)" : "2px solid transparent",
        marginRight: 8,
      }}
    >
      {children}
    </button>
  );
}

function Labeled({ children }) {
  return (
    <div className="field">
      {children}
    </div>
  );
}

const modalCss = \`
.field > label { display:block; font-weight:600; margin-bottom:4px; }
.field input[type="text"],
.field input[type="date"],
.field input[type="number"],
.field select,
.field textarea { width:100%; padding:8px 10px; border:1px solid #ddd; border-radius:8px; background:#fff; }
.hint { margin: 6px 0 0; color:#666; font-size:12px; }
.btn { border:1px solid #ddd; background:#fafafa; padding:8px 12px; border-radius:8px; cursor:pointer; }
.btn-ghost { background:transparent; }
.btn-primary { background:var(--color-primary,#4f46e5); color:white; border-color:transparent; }
.modal-backdrop { position:fixed; inset:0; background:rgba(0,0,0,.26); display:flex; align-items:center; justify-content:center; z-index:1000; }
.modal { background:white; border-radius:14px; padding:16px 16px 12px; box-shadow: 0 20px 50px rgba(0,0,0,.2); }
.modal-header { display:flex; align-items:center; justify-content:space-between; margin-bottom:8px; }
.alert-error { background:#fee2e2; color:#991b1b; padding:8px 10px; border-radius:8px; border:1px solid #fecaca; }
.tab { background:transparent; border:none; cursor:pointer; font-weight:600; color:#444; }
.pill, .pill-add { transition: transform .06s ease; }
.pill:hover, .pill-add:hover { transform: translateY(-1px); }

/* Status-Pills: nur ausgewählter hat Farbe (TaskStatusTheme.css liefert die st-*-Farben) */
.pill { padding:6px 10px; border-radius:9999px; border:1px solid #ddd; background:#f8f8f8; }
.pill.is-selected { border-color: transparent; color:#fff; }
.pill.st-neu.is-selected { background: var(--st-neu, #64748b); }
.pill.st-to_do.is-selected { background: var(--st-to_do, #2563eb); }
.pill.st-in_bearbeitung.is-selected { background: var(--st-in_bearbeitung, #f59e0b); }
.pill.st-fertig.is-selected { background: var(--st-fertig, #16a34a); }

/* Zusatzarbeiten-Pills (nutzen deine AdditionalWorkTheme.css Farben) */
.pill-add { padding:6px 10px; border-radius:9999px; border:1px dashed #ddd; background:#fff; }
.pill-add.is-active { border-style: solid; }
\`;

function toForm(t) {
  if (!t) return {};
  return {
    bezeichnung: t.bezeichnung ?? "",
    kunde: t.kunde ?? "",
    teilenummer: t.teilenummer ?? "",
    end_datum: t.end_datum ?? "",
    stk: Number.isFinite(t.stk) ? t.stk : null,
    fa: t.fa ?? "",
    status: t.status ?? "neu",
    fai: !!t.fai,
    qs: !!t.qs,
    arbeitsstation: t.arbeitsstation ?? null,
    zustaendig: t.zustaendig ?? "",
    dateipfad: t.dateipfad ?? "",
    zusaetzliche_infos: t.zusaetzliche_infos ?? "",
  };
}

function fromForm(f) {
  return {
    bezeichnung: f.bezeichnung ?? null,
    kunde: f.kunde ?? null,
    teilenummer: f.teilenummer ?? null,
    end_datum: f.end_datum ?? null,
    stk: Number.isFinite(f.stk) ? f.stk : null,
    fa: f.fa ?? null,
    status: f.status ?? null,
    fai: !!f.fai,
    qs: !!f.qs,
    arbeitsstation: f.arbeitsstation ?? null,
    zustaendig: f.zustaendig ?? null,
    dateipfad: f.dateipfad ?? null,
    zusaetzliche_infos: f.zusaetzliche_infos ?? null,
  };
}
