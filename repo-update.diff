diff --git a/README.md b/README.md
new file mode 100644
--- /dev/null
+++ b/README.md
@@ -0,0 +1,260 @@
+# task-app — Start & Deploy
+
+Monorepo mit **Frontend (Vite/React)**, **Backend (Spring Boot)** und **Docker/Compose**.  
+Lokal in der IDE entwickeln, optional lokal in Docker testen, auf dem Pi mit Docker deployen.
+
+---
+
+## Inhalt
+
+- `backend/` – Spring Boot (Java 17, Maven)
+- `frontend/` – Vite/React (Node 20+, npm)
+- `compose.yaml` – Services: `db`, `backend`, `caddy`
+- `.env.example` – ENV-Vorlage (niemals echte Secrets commiten)
+- (optional) `deploy.sh`, `dev.ps1`
+
+---
+
+## 1) Voraussetzungen
+
+- Java 17, Maven (oder `./mvnw`)
+- Node 20+, npm
+- Docker & Docker Compose
+- optional: `jq` für hübsche JSON-Ausgabe
+
+---
+
+## 2) Profile & Pfade (wichtig)
+
+Pfade kommen aus `application.yml` **und** können per ENV in Compose überschrieben werden:
+
+- `folderpicker.base-path`
+- `attachments.base-path`
+
+**Ladereihenfolge (später gewinnt):**
+1. `application.yml` (Standard + Profil-Blöcke)
+2. `application-<profile>.*` (falls vorhanden)
+3. **ENV/Compose** (`FOLDERPICKER_BASE_PATH`, `ATTACHMENTS_BASE_PATH`, `SPRING_DATASOURCE_PASSWORD` …)
+
+**Relaxed Binding:**  
+`FOLDERPICKER_BASE_PATH` ? `folderpicker.base-path`  
+`ATTACHMENTS_BASE_PATH` ? `attachments.base-path`
+
+**Profilgruppe:**  
+In `application.yml` ist `pi` als Gruppe definiert: `pi = [docker, prod]`.
+
+---
+
+## 3) Schnellstart lokal (IDE, Profil `dev`)
+
+### Backend (Dev)
+```bash
+cd backend
+./mvnw -DskipTests package
+./mvnw spring-boot:run
+# -> http://localhost:8080
+```
+
+### Frontend (Dev)
+```bash
+cd frontend
+npm ci
+npm run dev
+# -> http://localhost:5173
+```
+
+**Dev-Pfade (Windows, in `application.yml`):**
+```yaml
+folderpicker:
+  base-path: "C:/Users/Master/task-app/files"
+attachments:
+  base-path: "C:/Users/Master/task-app/files/attachments"
+```
+
+---
+
+## 4) Docker lokal (Profil `docker`)
+
+**ENV-Datei (nicht committen):** `.env.dev.docker`
+```ini
+SPRING_PROFILES_ACTIVE=docker
+SPRING_DATASOURCE_PASSWORD=devpw
+POSTGRES_PASSWORD=devpw
+FOLDERPICKER_BASE_PATH=/data/files
+ATTACHMENTS_BASE_PATH=/data/files/attachments
+```
+
+**Starten:**
+```bash
+docker compose --env-file .env.dev.docker up -d
+docker compose logs -f --tail=200 backend
+```
+
+---
+
+## 5) Deployment auf dem Pi (Profilgruppe `pi` = `docker,prod`)
+
+**ENV (auf dem Pi im Repo-Ordner):** `.env`
+```ini
+SPRING_PROFILES_ACTIVE=pi
+SPRING_DATASOURCE_PASSWORD=<STRONG>
+POSTGRES_PASSWORD=<STRONG>
+FOLDERPICKER_BASE_PATH=/data/files
+ATTACHMENTS_BASE_PATH=/data/files/attachments
+```
+
+**Starten/Update:**
+```bash
+docker compose up -d
+docker compose ps
+curl -s http://localhost/api/fs/health | jq .
+```
+
+**Volumes (Compose, Host ? Container):**
+- `/srv/taskapp/files` ? `/data/files`
+- `/srv/taskapp/files/attachments` ? `/data/files/attachments`
+
+---
+
+## 6) Prod-Tuning (Profil `prod`)
+
+- kleines Hikari-Pool-Sizing (Pi-freundlich)
+- `show-sql=false`, schlankes Logging
+- `server.shutdown=graceful`, Kompression aktiviert
+- `forward-headers-strategy=framework` (Caddy)
+- Actuator minimal (nur Health)
+
+> `prod` **stapelt** sich über `docker`. Auf dem Pi wird per `SPRING_PROFILES_ACTIVE=pi` automatisch beides aktiviert.
+
+---
+
+## 7) Profil-Matrix (Überblick)
+
+| Kontext        | `SPRING_PROFILES_ACTIVE` | Pfadquelle (`folderpicker`/`attachments`)                          | DB URL/User                                   | Passwörter            | FE API-Base | Reverse Proxy | Besonderheiten |
+|----------------|---------------------------|---------------------------------------------------------------------|-----------------------------------------------|-----------------------|-------------|---------------|----------------|
+| IDE lokal      | `dev`                     | `application.yml` (dev, Windows-Pfade)                              | `jdbc:postgresql://localhost:5432/taskapp` / `taskdb_admin` | IDE-ENV (z. B. `SPRING_DATASOURCE_PASSWORD`) | `http://localhost:8080` (dev) | –             | `show-sql=true`, ausführliches Logging |
+| Docker lokal   | `docker`                  | **ENV/Compose** ? `/data/files`, `/data/files/attachments`          | `jdbc:postgresql://db:5432/taskapp` / `task`  | `.env.dev.docker`     | `/api`      | Caddy (optional) | Prod-ähnlich ohne Prod-Tweaks |
+| Prod (Pi)      | `docker,prod` oder `pi`   | **ENV/Compose** ? `/data/files`, `/data/files/attachments`          | `jdbc:postgresql://db:5432/taskapp` / `task`  | `.env` am Pi          | `/api`      | Caddy         | Prod-Tweaks aktiv (s. o.) |
+
+---
+
+## 8) Nützliche Kommandos
+
+```bash
+# Backend-Logs (Compose)
+docker compose logs -f --tail=200 backend
+
+# Caddy neu laden (wenn Caddyfile geändert)
+docker compose exec caddy caddy reload --config /etc/caddy/Caddyfile
+
+# DB-Shell
+docker compose exec db psql -U task -d taskapp
+
+# Health (direkt Backend)
+curl -s http://localhost:8080/api/fs/health | jq .
+
+# Health (durch Caddy)
+curl -s http://localhost/api/fs/health | jq .
+```
+
+---
+
+## 9) Kiosk (optional, Pi)
+
+Autostart via `~/.config/lxsession/LXDE-pi/autostart` ? startet `~/bin/kiosk.sh`.  
+Skalierung im Script (4K-TV): `SCALE="1.50"`.
+
+---
+
+## 10) Git-Hygiene
+
+```
+.env
+.env.*
+!/.env.example
+!/.env.prod.example
+```
+
+---
+
+## 11) Hilfsskripte
+
+**Windows (lokal):** `dev.ps1`  
+Baut Backend (skip tests), öffnet Frontend-Dev in neuem Fenster, startet Backend.
+
+**Pi/Unix (Deploy):** `deploy.sh`  
+Pull ? Backend-Image bauen ? Compose up ? Status + Healthcheck.
diff --git a/.env.example b/.env.example
new file mode 100644
--- /dev/null
+++ b/.env.example
@@ -0,0 +1,20 @@
+# Copy this file to .env (same folder as compose.yaml) and fill the secrets.
+# This .env is used by docker compose for environment interpolation.
+
+# --- Database (PostgreSQL) ---
+# Postgres superuser password inside the 'db' service
+POSTGRES_PASSWORD=change-me
+
+# Spring Boot datasource password used by the backend service
+# Must match the DB user you configure (e.g. user 'task').
+SPRING_DATASOURCE_PASSWORD=change-me
+
+# --- Storage paths (container-internal) ---
+# In compose.yaml, these are typically mounted from host paths like /srv/taskapp/files ? /data/files
+FOLDERPICKER_BASE_PATH=/data/files
+ATTACHMENTS_BASE_PATH=/data/files/attachments
+
+# --- Optional overrides ---
+# SPRING_PROFILES_ACTIVE=docker
+# JAVA_OPTS=-Xms256m -Xmx512m
+
diff --git a/.env.prod.example b/.env.prod.example
new file mode 100644
--- /dev/null
+++ b/.env.prod.example
@@ -0,0 +1,13 @@
+# .env.prod.example — template for Pi/Prod (copy to .env on the Pi)
+SPRING_PROFILES_ACTIVE=pi
+
+# --- Database (set strong, unique passwords!) ---
+SPRING_DATASOURCE_PASSWORD=change-me
+POSTGRES_PASSWORD=change-me
+
+# --- Storage (container paths; volumes map host ? container) ---
+FOLDERPICKER_BASE_PATH=/data/files
+ATTACHMENTS_BASE_PATH=/data/files/attachments
+
diff --git a/deploy.sh b/deploy.sh
new file mode 100755
--- /dev/null
+++ b/deploy.sh
@@ -0,0 +1,26 @@
+#!/usr/bin/env bash
+set -euo pipefail
+cd "$(dirname "$0")"
+
+echo "[deploy] pulling..."
+git pull --rebase
+
+echo "[deploy] building backend image..."
+docker compose build backend
+
+echo "[deploy] starting/updating services..."
+docker compose up -d
+
+echo "[deploy] status:"
+docker compose ps
+
+echo "[deploy] health:"
+if command -v jq >/dev/null 2>&1; then
+  curl -s http://localhost/api/fs/health | jq . || true
+else
+  curl -s http://localhost/api/fs/health || true
+fi
+
diff --git a/dev.ps1 b/dev.ps1
new file mode 100644
--- /dev/null
+++ b/dev.ps1
@@ -0,0 +1,35 @@
+# dev.ps1 — build & run locally on Windows
+# Usage: PowerShell > .\dev.ps1
+
+$ErrorActionPreference = "Stop"
+
+# ensure script runs from repo root
+Set-Location -Path (Split-Path -Parent $MyInvocation.MyCommand.Path)
+
+Write-Host "[dev] Building backend..." -ForegroundColor Cyan
+Push-Location backend
+if (Test-Path .\mvnw.cmd) {
+  .\mvnw.cmd -q -DskipTests package
+} else {
+  mvn -q -DskipTests package
+}
+Pop-Location
+
+Write-Host "[dev] Starting frontend dev server (new window)..." -ForegroundColor Cyan
+$frontendCmd = 'cd "{0}\frontend"; if (Test-Path package-lock.json) {{ npm ci }} else {{ npm install }}; npm run dev' -f (Get-Location).Path
+Start-Process powershell -ArgumentList "-NoExit", "-Command", $frontendCmd
+
+Write-Host "[dev] Starting backend (Spring Boot)..." -ForegroundColor Cyan
+Push-Location backend
+if (Test-Path .\mvnw.cmd) {
+  .\mvnw.cmd spring-boot:run
+} else {
+  mvn spring-boot:run
+}
+Pop-Location
+
diff --git a/backend/src/main/resources/application-prod.properties b/backend/src/main/resources/application-prod.properties
deleted file mode 100644
--- a/backend/src/main/resources/application-prod.properties
+++ /dev/null
@@ -1,8 +0,0 @@
-# legacy (replaced by application.yml profiles)
-spring.servlet.multipart.max-file-size=50MB
-spring.servlet.multipart.max-request-size=50MB
-
diff --git a/backend/src/main/resources/application.properties b/backend/src/main/resources/application.properties
deleted file mode 100644
--- a/backend/src/main/resources/application.properties
+++ /dev/null
@@ -1,22 +0,0 @@
-# legacy (replaced by application.yml profiles)
-# DO NOT COMMIT SECRETS HERE
-# spring.datasource.password=...
-
-.FolderPicker.base-path=C:/Users/Master/task-app
-logging.level.org.hibernate.SQL=DEBUG
-logging.level.org.hibernate.type.descriptor.sql=TRACE
-logging.level.org.springframework.web=INFO
-logging.level.org.springframework.web.servlet.DispatcherServlet=DEBUG
-logging.level.org.springframework.web.servlet.mvc.method.annotation=TRACE
-logging.level.com.pp.taskmanagementbackend=DEBUG
-logging.level.com.pp.taskmanagementbackend.service.AttachmentStorageService=DEBUG
