spring:
  profiles:
    active: dev
    group:
      pi: [docker, prod]   # Ein Schalter für den Pi (docker + prod zusammen)

---
# =========================
# DEV (IDE, lokal ohne Docker)
# =========================
spring:
  config:
    activate:
      on-profile: dev
  application:
    name: pp
  datasource:
    url: jdbc:postgresql://localhost:5432/taskdb
    username: taskdb_admin
    password: ${SPRING_DATASOURCE_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true
  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 50MB
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true

server:
  port: 8080

logging:
  level:
    org.hibernate.SQL: debug
    org.hibernate.type.descriptor.sql: trace
    org.springframework.web: info
    org.springframework.web.servlet.DispatcherServlet: debug
    org.springframework.web.servlet.mvc.method.annotation: trace
    com.pp.taskmanagementbackend: debug
    com.pp.taskmanagementbackend.service.AttachmentStorageService: debug

folderpicker:
  base-path: "../docs/dev-filepath/files"
attachments:
  base-path: "../docs/dev-filepath/files/attachments"

---
# =========================
# DOCKER (Container-Umgebung)
# =========================
spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: jdbc:postgresql://db:5432/taskapp
    username: task
    password: ${SPRING_DATASOURCE_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: validate

server:
  port: 8080

# In Docker kommen die Pfade via ENV/Compose rein:
folderpicker:
  base-path: ${FOLDERPICKER_BASE_PATH:/data/files}
attachments:
  base-path: ${ATTACHMENTS_BASE_PATH:/data/files/attachments}

---
# =========================
# PROD (Verhalten/Security/Perf-Tweaks; stapelt sich über docker)
# =========================
spring:
  config:
    activate:
      on-profile: prod

  # schlanker Connection Pool für Pi
  datasource:
    hikari:
      maximum-pool-size: 5
      minimum-idle: 1

  jpa:
    show-sql: false
    hibernate:
      ddl-auto: validate

  main:
    banner-mode: "off"

  lifecycle:
    timeout-per-shutdown-phase: 20s

server:
  port: 8080
  shutdown: graceful
  forward-headers-strategy: framework
  compression:
    enabled: true
    mime-types: application/json,application/javascript,text/css,text/plain
    min-response-size: 1KB
  tomcat:
    threads:
      max: 100
      min-spare: 10

# Actuator minimal (wir nutzen /api/fs/health)
management:
  endpoints:
    enabled-by-default: false
  endpoint:
    health:
      enabled: true
      show-details: "never"
  server:
    port: 0

logging:
  level:
    root: INFO
    org.springframework.web: INFO
    org.hibernate.SQL: OFF
    org.hibernate.type.descriptor.sql: OFF
    com.pp: INFO

# Optional: falls Prod auch außerhalb Docker laufen sollte, bleiben die Platzhalter nützlich.
folderpicker:
  base-path: ${FOLDERPICKER_BASE_PATH:/data/files}
attachments:
  base-path: ${ATTACHMENTS_BASE_PATH:/data/files/attachments}
